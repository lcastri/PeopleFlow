session: HRISim_bringup
init_cmd: |
  echo " "
  echo " "
  echo " "
  echo "Running Initialisation" | awk '{ gsub("Running Initialisation", "\033[1;21m\033[1;30m&\033[0m"); print }' ;

  #exec /bin/bash
  cd @TMULE_CONFIG_DIR@ || true
  set -o pipefail
  function export_default () {
    var_name="$1"
    var_default="$2"
    eval $var_name="${!var_name:-$var_default}"
    export $var_name
    echo "  $0 -> $var_name=${!var_name}"
  }

  # source ROS
  source "/opt/ros/$(rosversion -d)/setup.bash"

  # source the tiago catkin workspace
  source "$HOME/.bashrc"
  export_default CATKIN_WS "$HOME/ros_ws"

  # robot specific arguments
  export_default TIAGO_TYPE "iron"
  export_default TIAGO_x "0.0"
  export_default TIAGO_y "0.0"
  export_default TIAGO_z "0.0"
  export_default TIAGO_R "0.0"
  export_default TIAGO_P "0.0"
  export_default TIAGO_Y "0"
  export_default INIT_BATTERY "100"
  export_default STATIC_DURATION "5"
  export_default DYNAMIC_DURATION "4"
  export_default LOAD_FACTOR "5"
  export_default CHARGING_TIME "2"
  export_default ABORT_TIME_THRESHOLD "45"

  # world arguments
  # choose a map between: maze, maze_corridor, maze_corridor_withTurn, maze_corridor_withDoors
  export_default WORLD "warehouse"

  # navigation specific arguments
  export_default GLOBAL_PLANNER "global_planner"
  export_default LOCAL_PLANNER "teb"
  export_default LOCALIZATION "amcl"
  export_default CONFIG_BASE_PATH "$(rospack find tiago_navigation)"
  export_default MAP "$HOME/.pal/tiago_maps/configurations/$WORLD"

  # PNP specific arguments
  export_default PNP_PLANS "$CATKIN_WS/src/HRISim/hrisim_plans"
  export_default PNP_ACTIONS "$CATKIN_WS/src/HRISim/hrisim_actions"
  export_default PNP_CONDITIONS "$CATKIN_WS/src/HRISim/hrisim_conditions"

  # PedSim arguments
  # robot_mode == 0: CONTROLLED implies that the robot's velocity is set by some planning algorithm like DWA. Its very similar to the teleoperation mode, using tf in the mix is just a layer on top of this -->
  # robot_mode == 1: TELEOPERATION , we map the output of a teleop node (like joystick) to drive the robot -->
  # robot_mode == 2: SOCIAL mode means the robot's velocity is set by the social force just like the other agents -->
  export_default SCENARIO "warehouse"
  export_default ALLOW_TASK "true"
  export_default RECORD "true"
  export_default STARTING_ELAPSED "8"
  export_default MAX_TASKTIME "60"
  export_default IS_STUCK_THRESHOLD "65"
  export_default HUMAN_MODE "1"
  export_default MAX_HUMAN_SPEED "1.5"
  export_default ROBOT_RADIUS "5"
  export_default WITH_TELEOP_PED "false"
  export_default HUMAN_x "-5"
  export_default HUMAN_y "5"
  export_default SPAWN_AGENT "true"
  export_default SPAWN_TELEOP_AGENT "false"
  export_default SPAWN_TIMEOUT "10.0"
  export_default FORCE_OBSTACLE "5.0"
  export_default SIGMA_OBSTACLE "0.25"
  export_default FORCE_SOCIAL "10.0"
  export_default INIT_TIME "H8"

  # Gazebo arguments
  export_default GUI "false"
  export_default MAX_STEP_SIZE "0.002"
  export_default REAL_TIME_UPDATE_RATE "0"

  # CausalFlow arguments
  export_default CIE "CIE_100_HH_v3"
  export_default PRED_STEP "5"

windows:
  - name: env
    tags: ['core']
    panes:
      - rosmaster --core
  - name: visual
    tags: ['core']
    panes:
      - 'roslaunch hrisim_gazebo simulation.launch gui:=$GUI robot:=$TIAGO_TYPE public_sim:=true world:=$WORLD TIAGO_x:=$TIAGO_x TIAGO_y:=$TIAGO_y TIAGO_z:=$TIAGO_z TIAGO_R:=$TIAGO_R TIAGO_P:=$TIAGO_P TIAGO_Y:=$TIAGO_Y spawn_agent:=$SPAWN_AGENT spawn_teleop_agent:=$SPAWN_TELEOP_AGENT spawn_timeout:=$SPAWN_TIMEOUT'
      - 'rviz -d "$(rospack find hrisim_rviz)/config/rviz/hrisim_rviz.rviz" --fixed-frame map'
      - 'rqt --standalone Peopleflow'
      - 'rosrun robot_info robot_batteryinfo.py'
      - 'rosrun peopleflow_info peopleflow_info.py'
      - 'roscd hrisim_gazebo && ./physics_params.sh $MAX_STEP_SIZE $REAL_TIME_UPDATE_RATE'
  - name: robot
    tags: ['robot']
    panes:
      - 'roslaunch tiago_2dnav_gazebo navigation.launch public_sim:=true global_planner:=$GLOBAL_PLANNER local_planner:=$LOCAL_PLANNER localization:=$LOCALIZATION config_base_path:=$CONFIG_BASE_PATH map:=$MAP'
      - 'rosrun robot_twist_mux mytwist_mux.py'
      - 'roslaunch robot_battery sim_battery.launch init_battery:=$INIT_BATTERY static_duration:=$STATIC_DURATION dynamic_duration:=$DYNAMIC_DURATION charging_time:=$CHARGING_TIME load_factor:=$LOAD_FACTOR'
      - 'rosrun robot_recovery standUp.py'
      - 'rosrun robot_recovery localiseMe.py'
      - 'rosrun robot_info robot_closestWP.py'
      - 'rosrun robot_battery ExpectedLifetime.py'
      - 'roslaunch robot_clearing_distance clearing_distance.launch'
      - 'rosrun robot_task TaskInfoManager.py'
  - name: planning
    tags: ['core']
    panes:
      - 'roslaunch pnp_ros pnp_ros.launch plans_folder:=$PNP_PLANS actions_folder:=$PNP_ACTIONS conditions_folder:=$PNP_CONDITIONS'
      - 'rosparam set /hrisim/abort_time_threshold $ABORT_TIME_THRESHOLD && roscd hrisim_plans/scripts && python TIAGo_causal_hardcoded_plan.py --init_time=$INIT_TIME --init_battery=$INIT_BATTERY'
  - name: scenario
    tags: ['exp']
    panes:
      - 'roslaunch peopleflow_manager peopleflow_manager.launch scenario:=$SCENARIO starting_elapsed:=$STARTING_ELAPSED'
      - 'roslaunch peopleflow_pedsim_bridge peopleflow_pedsim.launch scenario:=$SCENARIO allow_task:=$ALLOW_TASK max_tasktime:=$MAX_TASKTIME'
      - 'roslaunch pedsim_simulator mysimulator.launch scenario:=$SCENARIO robot_mode:=$HUMAN_MODE max_robot_speed:=$MAX_HUMAN_SPEED robot_radius:=$ROBOT_RADIUS is_stuck_threshold:=$IS_STUCK_THRESHOLD force_obstacle:=$FORCE_OBSTACLE sigma_obstacle:=$SIGMA_OBSTACLE force_social:=$FORCE_SOCIAL with_teleop_ped:=$WITH_TELEOP_PED ped_x:=$HUMAN_x ped_y:=$HUMAN_y ped_theta:=0'
      - 'rosrun rqt_peopleflow agents_info.py'
      - 'rosrun peopleflow_counter PeopleCounter.py'
      - 'rosrun peopleflow_graph_visualisation GraphVisualisation.py'
  - name: data
    tags: ['exp']
    panes:
      - if [[ "$RECORD" == "true" ]]; then rosrun hrisim_recording record.py; fi
  - name: prediction
    tags: ['exp']
    panes:
      - 'roslaunch hrisim_prediction_manager prediction_manager.launch CIE:=$CIE pred_step:=$PRED_STEP'